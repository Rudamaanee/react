@charset "utf-8";
@use "sass:math";

// 사용법 @include clearfix;
@mixin clearfix() {
  &::after {
    display: block;
    clear: both;
    content: "";
  }
}

@mixin ellisis($line: 1) {
  @if ($line == 1) {
    text-overflow: ellipsis;
    white-space: nowrap;
    overflow: hidden
  } @else {
    display: -webkit-box;
    text-overflow: ellipsis;
    -webkit-box-orient: vertical;
    -webkit-line-clamp: $line;
    overflow: hidden
  }
}

@mixin opacity($value) {
  $IEValue: $value * 100;
  opacity: $value;
  -ms-filter: "progid:DXImageTransform.Microsoft.Alpha(Opacity="+$IEValue+")";
  filter: alpha(opacity=$IEValue);
}

@mixin xs { //  <576px   // phones
  @media (min-width: map-get($breakpoints, 'xs')) {
    @content;
  }
}
@mixin sm { //  ≥576px   // phones
  @media (min-width: map-get($breakpoints, 'sm')) {
    @content;
  } 
}
@mixin md { //  ≥768px   // phones & tablets
  @media (min-width: map-get($breakpoints, 'md')) {
    @content;
  }
}
@mixin lg { //  ≥992px   // phones 가로 & Tablets 세로
  @media (min-width: map-get($breakpoints, 'lg')) {
    @content;
  }
}
@mixin xl { // ≥1200px   // notbook & desktop 
  @media (min-width: map-get($breakpoints, 'xl')) {
    @content;
  }
}
@mixin xxl { // ≥1400px/  // desktop large
  @media (min-width: map-get($breakpoints, 'xxl')) {
    @content;
  }
}
// @include xxl { @content };

// /* ########## preifx ########## */
@mixin placeholder {
  $placeholders: ":-webkit-input" ":-moz" "-moz" "-ms-input";
  @each $prefix in $placeholders {
    &:#{$prefix}-placeholder {
      @content;
    }
  }
}

@mixin border-radius($radius) {
  @each $prefix in -webkit-, -moz-, '' {
    #{$prefix}border-radius: $radius
  }
}
@mixin border-top-left-radius($radius) {
  @each $prefix in -webkit-, -moz-, '' {
    #{$prefix}border-top-left-radius: $radius
  }
}
@mixin border-top-right-radius($radius) {
  @each $prefix in -webkit-, -moz-, '' {
    #{$prefix}border-top-right-radius: $radius
  }
}
@mixin border-bottom-left-radius($radius) {
  @each $prefix in -webkit-, -moz-, '' {
    #{$prefix}border-bottom-left-radius: $radius
  }
}
@mixin border-bottom-right-radius($radius) {
  @each $prefix in -webkit-, -moz-, '' {
    #{$prefix}border-bottom-right-radius: $radius
  }
}

@mixin appearance($appearance) {
  @each $prefix in -webkit-, -moz-, '' {
    #{$prefix}appearance: $appearance
  }
}

@mixin box-sizing($box-sizing) {
  @each $prefix in -webkit-, -moz-, '' {
    #{$prefix}box-sizing: $box-sizing
  }
}

@mixin box-shadow($args...) {
  @each $prefix in -webkit-, -moz-, '' {
    #{$prefix}box-shadow: $args
  }
} //@include box-shadow(2px 6px 10px #999, 0px 4px 5px #666);

@mixin animation($animations...) {
  @each $prefix in -webkit-, -moz-, '' {
    #{$prefix}animation: $animations
  }
}

@mixin transition($x...) {
  @each $prefix in -webkit-, -moz-, -o-, '' {
    #{$prefix}transition: $x
  }
}
@mixin transition-time($time) {
  @each $prefix in -webkit-, -moz-, -o-, '' {
    #{$prefix}transition-time: $time
  }
}
@mixin transition-origin($origin) {
  @each $prefix in -webkit-, -moz-, -o-, '' {
    #{$prefix}transition-origin: $origin
  }
}
@mixin transition-duration($dration) {
  @each $prefix in -webkit-, -moz-, -o-, '' {
    #{$prefix}transition-duration: $duration
  }
}
@mixin transition-timing-function($x) {
  @each $prefix in -webkit-, -moz-, -o-, '' {
    #{$prefix}transition-timing-function: $x
  }
}
@mixin transition-property($property...) {
  @each $prefix in -webkit-, -moz-, -o-, '' {
    #{$prefix}transition-property: $property
  }
}

@mixin user-select($select) {
  @each $prefix in -webkit-, -moz-, -ms-, '' {
    #{$prefix}user-select: $select
  }
}

@mixin transforms($transforms...) {
  @each $prefix in -webkit-, -moz-, -o-, '' {
    #{$prefix}transform: $transforms
  }
} //@include transform(scale(1.5) rotate(0));
@mixin transform($transform) {
  @each $prefix in -webkit-, -moz-, -o-, '' {
    #{$prefix}transform: $transform
  }
}
@mixin transform-origin($origin) {
  @each $prefix in -webkit-, -moz-, '' {
    #{$prefix}transform-origin: $origin
  }
}
//rotate
@mixin rotate($deg) {
  @include transform(rotate($deg));
}
//scale
@mixin scale($scale) {
  @include transform(scale($scale));
}
@mixin scaleX($scaleX) {
  @include transform(scaleX($scaleX));
}
@mixin scaleY($scaleY) {
  @include transform(scaleY($scaleY));
}
//translate
@mixin translate($x, $y) {
  @include transform(translate($x, $y));
}
@mixin translateX($x) {
  @include transform(translateX($x));
}
@mixin translateY($y) {
  @include transform(translateY($y));
}
//skew
@mixin skew($x, $y) {
  @include transform(skew(#{$x}deg, #{$y}deg));
}

// /* ########## linear-gradient ########## */
@mixin linear-gradient($color-one, $color-two, $deg) {
  background:  -moz-linear-gradient($deg, $color-one 0%, $color-two 100%); // ff3.6+
  background: -webkit-gradient(liner, left top, right top, color-stop(0%, $color-one), color-stop(100%, $color-two)); // safai4+, chrome
  background: -webkit-linear-gradient($deg, $color-one 0%, $color-two 100%); // safai5.1+, chrome10+
  background:    -o-linear-gradient($deg, $color-one 0%, $color-two 100%); // opera 11.10+
  background:   -ms-linear-gradient($deg, $color-one 0%, $color-two 100%); // ie10+
  background:     linear-gradient($deg, $color-one 0%, $color-two 100%); // w3c
  filter: progid:DXImageTransform.Microsoft.gradient(startColorstr='$color-one', endColorstr='$color-two', GradientType=1); //ie6-9
}

// /* ########## positions ########## */
@mixin pox-x-center($type: absolute) {
  @if($type == fixed or $type == absolute) {
    position: $type;
    left: 50%;
    @include translateX(-50%)
  }
}
@mixin pox-y-center($type: absolute) {
  @if($type == fixed or $type == absolute) {
    position: $type;
    top: 50%;
    @include translateY(-50%)
  }
}
@mixin pox-xy-center($type: absolute) {
  @if($type == fixed or $type == absolute) {
    position: $type;
    top: 50%;
    left: 50%;
    @include translate(-50%, -50%)
  }
}

@mixin scrollbars($size, $foreground-color, $background-color: mix($forground-color, white, 50%)) {
  ::-webkit-scrollbar {
    width: $size;
    height: $size
  }
  ::-webkit-scrollbar-thumb {
    @include border-radius(100px);
    background: $foreground-color
  }
  ::-webkit-scrollbar-track {
    @include border-radius(100px);
    background: $background-color
  }
  body {
    scrollbar-face-color: $foreground-color;
    scrollbar-track-color: $background-color
  }
} //@include scrollbars(.5em, slategray);

// /* ########## svg color ########## */
@mixin recolor($color: #000, $opacity: 1) {
  $r:   calc(red($color) / 255);
  $g: calc(green($color) / 255);
  $b:  calc(blue($color) / 255);
  $a: $opacity;
  
  // grayscale fallback if SVG from data url is not supported
  $lightness: lightness($color);
  filter: saturate(0%) brightness(0%) invert($lightness) opacity($opacity);
  
  // color filter
  $svg-filter-id: "recolor";
  filter: url('data:image/svg+xml;utf8,\
    <svg xmlns="http://www.w3.org/2000/svg">\
    <filter id="#{$svg-filter-id}" color-interpolation-filters="sRGB">\
      <feColorMatrix type="matrix" values="\
      0 0 0 0 #{$r}\
      0 0 0 0 #{$g}\
      0 0 0 0 #{$b}\
      0 0 0 #{$a} 0\
      "/>\
    </filter>\
    </svg>\
    ##{$svg-filter-id}');
} // @include recolor($pointColor, 1);


@mixin ie-only() {
  @media all and (-ms-high-contrast: none), (-ms-high-contrast: active) {
    @content
  }
}